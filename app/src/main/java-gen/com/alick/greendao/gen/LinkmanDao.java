package com.alick.greendao.gen;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import demo.greendao.acewill.com.greendao3_demo.bean.HeaderColor;
import demo.greendao.acewill.com.greendao3_demo.bean.Linkman_Organization;

import demo.greendao.acewill.com.greendao3_demo.bean.Linkman;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINKMAN".
*/
public class LinkmanDao extends AbstractDao<Linkman, String> {

    public static final String TABLENAME = "LINKMAN";

    /**
     * Properties of entity Linkman.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LinkmanId = new Property(0, String.class, "linkmanId", true, "LINKMAN_ID");
        public final static Property LinkmanName = new Property(1, String.class, "linkmanName", false, "LINKMAN_NAME");
        public final static Property Linkman_head_color = new Property(2, int.class, "linkman_head_color", false, "LINKMAN_HEAD_COLOR");
        public final static Property IsManager = new Property(3, boolean.class, "isManager", false, "IS_MANAGER");
        public final static Property ColorId = new Property(4, int.class, "colorId", false, "COLOR_ID");
    }

    private DaoSession daoSession;

    private Query<Linkman> multiChat_LinkmensQuery;
    private Query<Linkman> organization_LinkmansQuery;

    public LinkmanDao(DaoConfig config) {
        super(config);
    }
    
    public LinkmanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINKMAN\" (" + //
                "\"LINKMAN_ID\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: linkmanId
                "\"LINKMAN_NAME\" TEXT," + // 1: linkmanName
                "\"LINKMAN_HEAD_COLOR\" INTEGER NOT NULL ," + // 2: linkman_head_color
                "\"IS_MANAGER\" INTEGER NOT NULL ," + // 3: isManager
                "\"COLOR_ID\" INTEGER NOT NULL );"); // 4: colorId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINKMAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Linkman entity) {
        stmt.clearBindings();
 
        String linkmanId = entity.getLinkmanId();
        if (linkmanId != null) {
            stmt.bindString(1, linkmanId);
        }
 
        String linkmanName = entity.getLinkmanName();
        if (linkmanName != null) {
            stmt.bindString(2, linkmanName);
        }
        stmt.bindLong(3, entity.getLinkman_head_color());
        stmt.bindLong(4, entity.getIsManager() ? 1L: 0L);
        stmt.bindLong(5, entity.getColorId());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Linkman entity) {
        stmt.clearBindings();
 
        String linkmanId = entity.getLinkmanId();
        if (linkmanId != null) {
            stmt.bindString(1, linkmanId);
        }
 
        String linkmanName = entity.getLinkmanName();
        if (linkmanName != null) {
            stmt.bindString(2, linkmanName);
        }
        stmt.bindLong(3, entity.getLinkman_head_color());
        stmt.bindLong(4, entity.getIsManager() ? 1L: 0L);
        stmt.bindLong(5, entity.getColorId());
    }

    @Override
    protected final void attachEntity(Linkman entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Linkman readEntity(Cursor cursor, int offset) {
        Linkman entity = new Linkman( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // linkmanId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // linkmanName
            cursor.getInt(offset + 2), // linkman_head_color
            cursor.getShort(offset + 3) != 0, // isManager
            cursor.getInt(offset + 4) // colorId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Linkman entity, int offset) {
        entity.setLinkmanId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLinkmanName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLinkman_head_color(cursor.getInt(offset + 2));
        entity.setIsManager(cursor.getShort(offset + 3) != 0);
        entity.setColorId(cursor.getInt(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Linkman entity, long rowId) {
        return entity.getLinkmanId();
    }
    
    @Override
    public String getKey(Linkman entity) {
        if(entity != null) {
            return entity.getLinkmanId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Linkman entity) {
        return entity.getLinkmanId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "linkmens" to-many relationship of MultiChat. */
    public List<Linkman> _queryMultiChat_Linkmens(String linkmanId) {
        synchronized (this) {
            if (multiChat_LinkmensQuery == null) {
                QueryBuilder<Linkman> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.LinkmanId.eq(null));
                multiChat_LinkmensQuery = queryBuilder.build();
            }
        }
        Query<Linkman> query = multiChat_LinkmensQuery.forCurrentThread();
        query.setParameter(0, linkmanId);
        return query.list();
    }

    /** Internal query to resolve the "linkmans" to-many relationship of Organization. */
    public List<Linkman> _queryOrganization_Linkmans(String organizationId) {
        synchronized (this) {
            if (organization_LinkmansQuery == null) {
                QueryBuilder<Linkman> queryBuilder = queryBuilder();
                queryBuilder.join(Linkman_Organization.class, Linkman_OrganizationDao.Properties.LinkmanId)
                    .where(Linkman_OrganizationDao.Properties.OrganizationId.eq(organizationId));
                organization_LinkmansQuery = queryBuilder.build();
            }
        }
        Query<Linkman> query = organization_LinkmansQuery.forCurrentThread();
        query.setParameter(0, organizationId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getHeaderColorDao().getAllColumns());
            builder.append(" FROM LINKMAN T");
            builder.append(" LEFT JOIN HEADER_COLOR T0 ON T.\"COLOR_ID\"=T0.\"COLOR_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected Linkman loadCurrentDeep(Cursor cursor, boolean lock) {
        Linkman entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        HeaderColor headerColor = loadCurrentOther(daoSession.getHeaderColorDao(), cursor, offset);
         if(headerColor != null) {
            entity.setHeaderColor(headerColor);
        }

        return entity;    
    }

    public Linkman loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<Linkman> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<Linkman> list = new ArrayList<Linkman>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<Linkman> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<Linkman> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
