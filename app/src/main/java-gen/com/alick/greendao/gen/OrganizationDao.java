package com.alick.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import demo.greendao.acewill.com.greendao3_demo.bean.Linkman_Organization;

import demo.greendao.acewill.com.greendao3_demo.bean.Organization;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORGANIZATION".
*/
public class OrganizationDao extends AbstractDao<Organization, String> {

    public static final String TABLENAME = "ORGANIZATION";

    /**
     * Properties of entity Organization.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property OrganizationId = new Property(0, String.class, "organizationId", true, "ORGANIZATION_ID");
        public final static Property OrganizationName = new Property(1, String.class, "organizationName", false, "ORGANIZATION_NAME");
    }

    private DaoSession daoSession;

    private Query<Organization> linkman_OrganizationsQuery;

    public OrganizationDao(DaoConfig config) {
        super(config);
    }
    
    public OrganizationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORGANIZATION\" (" + //
                "\"ORGANIZATION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: organizationId
                "\"ORGANIZATION_NAME\" TEXT);"); // 1: organizationName
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORGANIZATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Organization entity) {
        stmt.clearBindings();
 
        String organizationId = entity.getOrganizationId();
        if (organizationId != null) {
            stmt.bindString(1, organizationId);
        }
 
        String organizationName = entity.getOrganizationName();
        if (organizationName != null) {
            stmt.bindString(2, organizationName);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Organization entity) {
        stmt.clearBindings();
 
        String organizationId = entity.getOrganizationId();
        if (organizationId != null) {
            stmt.bindString(1, organizationId);
        }
 
        String organizationName = entity.getOrganizationName();
        if (organizationName != null) {
            stmt.bindString(2, organizationName);
        }
    }

    @Override
    protected final void attachEntity(Organization entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Organization readEntity(Cursor cursor, int offset) {
        Organization entity = new Organization( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // organizationId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // organizationName
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Organization entity, int offset) {
        entity.setOrganizationId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrganizationName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Organization entity, long rowId) {
        return entity.getOrganizationId();
    }
    
    @Override
    public String getKey(Organization entity) {
        if(entity != null) {
            return entity.getOrganizationId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Organization entity) {
        return entity.getOrganizationId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "organizations" to-many relationship of Linkman. */
    public List<Organization> _queryLinkman_Organizations(String linkmanId) {
        synchronized (this) {
            if (linkman_OrganizationsQuery == null) {
                QueryBuilder<Organization> queryBuilder = queryBuilder();
                queryBuilder.join(Linkman_Organization.class, Linkman_OrganizationDao.Properties.OrganizationId)
                    .where(Linkman_OrganizationDao.Properties.LinkmanId.eq(linkmanId));
                linkman_OrganizationsQuery = queryBuilder.build();
            }
        }
        Query<Organization> query = linkman_OrganizationsQuery.forCurrentThread();
        query.setParameter(0, linkmanId);
        return query.list();
    }

}
