package com.alick.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import demo.greendao.acewill.com.greendao3_demo.bean.Linkman_Organization;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINKMAN__ORGANIZATION".
*/
public class Linkman_OrganizationDao extends AbstractDao<Linkman_Organization, String> {

    public static final String TABLENAME = "LINKMAN__ORGANIZATION";

    /**
     * Properties of entity Linkman_Organization.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Linkman_Organization_id = new Property(0, String.class, "linkman_Organization_id", true, "LINKMAN__ORGANIZATION_ID");
        public final static Property LinkmanId = new Property(1, String.class, "linkmanId", false, "LINKMAN_ID");
        public final static Property MultiChatId = new Property(2, String.class, "multiChatId", false, "MULTI_CHAT_ID");
    };


    public Linkman_OrganizationDao(DaoConfig config) {
        super(config);
    }
    
    public Linkman_OrganizationDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINKMAN__ORGANIZATION\" (" + //
                "\"LINKMAN__ORGANIZATION_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: linkman_Organization_id
                "\"LINKMAN_ID\" TEXT," + // 1: linkmanId
                "\"MULTI_CHAT_ID\" TEXT);"); // 2: multiChatId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINKMAN__ORGANIZATION\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Linkman_Organization entity) {
        stmt.clearBindings();
 
        String linkman_Organization_id = entity.getLinkman_Organization_id();
        if (linkman_Organization_id != null) {
            stmt.bindString(1, linkman_Organization_id);
        }
 
        String linkmanId = entity.getLinkmanId();
        if (linkmanId != null) {
            stmt.bindString(2, linkmanId);
        }
 
        String multiChatId = entity.getMultiChatId();
        if (multiChatId != null) {
            stmt.bindString(3, multiChatId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Linkman_Organization entity) {
        stmt.clearBindings();
 
        String linkman_Organization_id = entity.getLinkman_Organization_id();
        if (linkman_Organization_id != null) {
            stmt.bindString(1, linkman_Organization_id);
        }
 
        String linkmanId = entity.getLinkmanId();
        if (linkmanId != null) {
            stmt.bindString(2, linkmanId);
        }
 
        String multiChatId = entity.getMultiChatId();
        if (multiChatId != null) {
            stmt.bindString(3, multiChatId);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Linkman_Organization readEntity(Cursor cursor, int offset) {
        Linkman_Organization entity = new Linkman_Organization( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // linkman_Organization_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // linkmanId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // multiChatId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Linkman_Organization entity, int offset) {
        entity.setLinkman_Organization_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setLinkmanId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMultiChatId(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Linkman_Organization entity, long rowId) {
        return entity.getLinkman_Organization_id();
    }
    
    @Override
    public String getKey(Linkman_Organization entity) {
        if(entity != null) {
            return entity.getLinkman_Organization_id();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
