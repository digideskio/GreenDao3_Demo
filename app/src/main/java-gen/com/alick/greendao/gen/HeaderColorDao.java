package com.alick.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import demo.greendao.acewill.com.greendao3_demo.bean.HeaderColor;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HEADER_COLOR".
*/
public class HeaderColorDao extends AbstractDao<HeaderColor, Integer> {

    public static final String TABLENAME = "HEADER_COLOR";

    /**
     * Properties of entity HeaderColor.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property ColorId = new Property(0, int.class, "colorId", true, "COLOR_ID");
        public final static Property ColorValue = new Property(1, String.class, "colorValue", false, "COLOR_VALUE");
    };


    public HeaderColorDao(DaoConfig config) {
        super(config);
    }
    
    public HeaderColorDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HEADER_COLOR\" (" + //
                "\"COLOR_ID\" INTEGER PRIMARY KEY NOT NULL ," + // 0: colorId
                "\"COLOR_VALUE\" TEXT);"); // 1: colorValue
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HEADER_COLOR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, HeaderColor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getColorId());
 
        String colorValue = entity.getColorValue();
        if (colorValue != null) {
            stmt.bindString(2, colorValue);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, HeaderColor entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getColorId());
 
        String colorValue = entity.getColorValue();
        if (colorValue != null) {
            stmt.bindString(2, colorValue);
        }
    }

    @Override
    public Integer readKey(Cursor cursor, int offset) {
        return cursor.getInt(offset + 0);
    }    

    @Override
    public HeaderColor readEntity(Cursor cursor, int offset) {
        HeaderColor entity = new HeaderColor( //
            cursor.getInt(offset + 0), // colorId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // colorValue
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, HeaderColor entity, int offset) {
        entity.setColorId(cursor.getInt(offset + 0));
        entity.setColorValue(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Integer updateKeyAfterInsert(HeaderColor entity, long rowId) {
        return entity.getColorId();
    }
    
    @Override
    public Integer getKey(HeaderColor entity) {
        if(entity != null) {
            return entity.getColorId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
