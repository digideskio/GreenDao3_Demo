package com.alick.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import demo.greendao.acewill.com.greendao3_demo.bean.Linkman_MultiChat;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LINKMAN__MULTI_CHAT".
*/
public class Linkman_MultiChatDao extends AbstractDao<Linkman_MultiChat, Void> {

    public static final String TABLENAME = "LINKMAN__MULTI_CHAT";

    /**
     * Properties of entity Linkman_MultiChat.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LinkmanId = new Property(0, String.class, "linkmanId", false, "LINKMAN_ID");
        public final static Property MultiChatId = new Property(1, String.class, "multiChatId", false, "MULTI_CHAT_ID");
    }


    public Linkman_MultiChatDao(DaoConfig config) {
        super(config);
    }
    
    public Linkman_MultiChatDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LINKMAN__MULTI_CHAT\" (" + //
                "\"LINKMAN_ID\" TEXT," + // 0: linkmanId
                "\"MULTI_CHAT_ID\" TEXT);"); // 1: multiChatId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LINKMAN__MULTI_CHAT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Linkman_MultiChat entity) {
        stmt.clearBindings();
 
        String linkmanId = entity.getLinkmanId();
        if (linkmanId != null) {
            stmt.bindString(1, linkmanId);
        }
 
        String multiChatId = entity.getMultiChatId();
        if (multiChatId != null) {
            stmt.bindString(2, multiChatId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Linkman_MultiChat entity) {
        stmt.clearBindings();
 
        String linkmanId = entity.getLinkmanId();
        if (linkmanId != null) {
            stmt.bindString(1, linkmanId);
        }
 
        String multiChatId = entity.getMultiChatId();
        if (multiChatId != null) {
            stmt.bindString(2, multiChatId);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public Linkman_MultiChat readEntity(Cursor cursor, int offset) {
        Linkman_MultiChat entity = new Linkman_MultiChat( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // linkmanId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1) // multiChatId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Linkman_MultiChat entity, int offset) {
        entity.setLinkmanId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setMultiChatId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(Linkman_MultiChat entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(Linkman_MultiChat entity) {
        return null;
    }

    @Override
    public boolean hasKey(Linkman_MultiChat entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
